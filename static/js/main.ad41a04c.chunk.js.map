{"version":3,"sources":["assets/visionome-logo-alt.png","assets/visionome-logo.png","components/Cylinder.tsx","components/Ideogram.tsx","components/Cytoband.tsx","components/TabsCard.tsx","components/GeneInfoCard.tsx","components/Chromosome.tsx","components/Window.tsx","graphql/queries.ts","components/Visualizer.tsx","BlastAPI.ts","components/Analyzer.tsx","components/HelpPage.tsx","components/Dashboard.tsx","App.tsx","aws-exports.js","index.tsx"],"names":["Cylinder","scale","props","useState","hovered","hover","color","hue","onClick","setViewMode","setSelectedChrom","info","console","log","onPointerOver","setHoveredChrom","position","getComponent","onPointerOut","args","Ideogram","hoveredChrom","length","Chroms","assembly_len","size","THREE","pos","val1","className","gutter","span","title","value","precision","valueStyle","prefix","Data","map","chrom","len","x","y","id","selectedChromLocations","includes","toString","viewMode","selectedChrom","Cytoband","xpos","ypos","location","setBandSelected","bandSelected","setBandHovered","bandHovered","handleClick","JSON","stringify","key","e","stopPropagation","tabListNoTitle","tab","parseDiseaseInfo","diseaseInfo","list","temp","i","push","join","arr","replaceAll","split","res","tempList","splice","one","two","three","href","TabsCard","urlString","name","ensemblid","description","diseaseinfo","activeTabKey1","setActiveTabKey1","contentList","tab1","tab2","toUpperCase","tabList","activeTabKey","tabBarExtraContent","target","rel","onTabChange","onTab1Change","GeneInfoCard","selectedItem","proteinCifUrl","setProteinCifUrl","selectedProtein","a","axios","method","url","gene","then","r","data","proteinSelected","proteinId","useEffect","descriptions","style","display","height","width","zIndex","ensembl_id","cytoband_location","extend","OrbitControls","Chromosome","selectedCytobandLocations","windowStartPt","prevYLen","prevYPos","chromSize","Sizes","multiplier","parse","localStorage","getItem","foundUrl","match","camera","zoom","filter","band","chromosome","substring","yLen","end","start","yPos","bandLocation","slice","stainValue","getGiemsa","giemsaStains","Window","searchGFFRefs","Search","Input","Visualizer","initialSearch","genome","setGenome","vcf","setVcf","setSelectedChromLocations","setSelectedCytobandLocations","searchForGene","searchValue","geneSearchQuery","API","graphql","query","queries","variables","eq","diseaseSearchQuery","matchPhrase","toLowerCase","Promise","all","geneSearchResults","diseaseSearchResults","results","items","cytoArr","item","cytobandlocation","chromArr","parseChrom","clear","obj","ensembleid","setItem","undefined","geneinfo","wildcard","vcfSearchResults","searchVCFRefs","alignContent","alignItems","padding","fontWeight","fontSize","placeholder","allowClear","onSearch","enterButton","cytoband","curIndex","BlastAPI","sequence","payload","fetch","headers","body","json","Text","Typography","Analyzer","setCurrentView","setInitialSearch","input","setInput","output","setOutput","onRunButtonClick","moveToSearch","text","tableColumns","dataIndex","render","flexDirection","textAlign","onChange","beforeUpload","file","reader","FileReader","readAsText","onload","evt","result","onerror","action","icon","UploadOutlined","type","metadata","total_hits","matches","best_score","longest_alignment","best_evalue","best_gene_symbol","dataSource","columns","headerStyle","textDecoration","HelpPage","Header","Layout","Content","Sider","Footer","SubMenu","Menu","SelectedView","currentView","Dashboard","backgroundColor","src","logoImage","logoText","theme","paddingLeft","MenuOutlined","flex","marginLeft","marginBottom","defaultSelectedKeys","mode","onSelect","Item","SlidersFilled","AppstoreFilled","QuestionCircleFilled","InfoCircleFilled","App","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","awsExports","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ad41a04c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/visionome-logo-alt.8c527be9.png\";","export default __webpack_public_path__ + \"static/media/visionome-logo.b4a2b92c.png\";","import React, { useState } from 'react';\nimport * as THREE from 'three';\n// import { Canvas, useLoader } from '@react-three/fiber';\n// import Model from './Model';\n// import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\n\n// import Model from './Model';\n\ninterface CProps {\n  position: THREE.Vector3;\n  scale: THREE.Vector3;\n  info: number;\n  viewMode: number;\n  hue: string;\n  setViewMode: React.Dispatch<React.SetStateAction<number>>;\n  selectedChrom: number;\n  setSelectedChrom: React.Dispatch<React.SetStateAction<number>>;\n  hoveredChrom: number;\n  setHoveredChrom: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport default function Cylinder({ scale, ...props }: CProps): JSX.Element {\n  // This reference will give us direct access to the THREE.Mesh object\n  // const ref = useRef<THREE.Mesh>(null!);\n  // Hold state for hovered and clicked events\n  const [hovered, hover] = useState(false);\n  //const [clicked, click] = useState(false);\n\n  function handleClick() {\n    props.setViewMode(1);\n    props.setSelectedChrom(props.info);\n    console.log(props.info);\n    //console.log(props.info);\n  }\n\n  function activateHover() {\n    hover(true);\n    props.setHoveredChrom(props.info);\n    console.log('y ' + props.position.getComponent(1));\n    //console.log('activating hover');\n    //console.log('x position ' + props.position.getComponent(0));\n    //console.log('y position ' + props.position.getComponent(1));\n  }\n\n  function deactivateHover() {\n    hover(false);\n    props.setHoveredChrom(-1);\n    console.log('deactivating hover');\n  }\n\n  // Method 2, useLoader()\n  // function Scene() {\n  //   const fbx = useLoader(FBXLoader, './Chrom1.fbx');\n  //   return <primitive object={fbx} />;\n  // }\n\n  // eslint-disable-next-line react/destructuring-assignment\n  // TODO: removed ref prop from mesh, figure out if this\n  // is required for selecting meshes in the future.\n  const color = props.hue;\n\n  return (\n    <mesh\n      {...props}\n      scale={scale}\n      onClick={() => handleClick()}\n      onPointerOver={() => activateHover()}\n      onPointerOut={() => deactivateHover()}\n    >\n      <cylinderGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : color} />\n    </mesh>\n\n    // <Suspense fallback={null}>\n    //   <Scene />\n    //   {/* <Model /> */}\n    // </Suspense>\n  );\n}\n","import { Canvas } from '@react-three/fiber';\nimport React, { useState } from 'react';\nimport { Card, Row, Col, Statistic } from 'antd';\n// import { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\n\nimport * as THREE from 'three';\nimport Data from '../ideogram.json';\nimport Cylinder from './Cylinder';\nimport Chroms from '../scripts/chrom.json';\n\ninterface IProps {\n  selectedChromLocations: string[];\n  viewMode: number;\n  setViewMode: React.Dispatch<React.SetStateAction<number>>;\n  selectedChrom: number;\n  setSelectedChrom: React.Dispatch<React.SetStateAction<number>>;\n}\n\n// Meshes for canvas displaying all chromosomes together.\nfunction Ideogram(props: IProps): JSX.Element {\n  // Render all chromosomes without cytobands\n  const [hoveredChrom, setHoveredChrom] = useState(-1);\n  let length = 0; // nucleotide length\n  if (hoveredChrom > -1) {\n    length = Chroms[hoveredChrom - 1].assembly_len;\n  }\n  //console.log(props.selectedLocations);\n  let size = new THREE.Vector3(10, 10, 10);\n  let pos = new THREE.Vector3(0, 0, 0);\n\n  let val1 = hoveredChrom > -1 ? hoveredChrom : 'None';\n\n  if (val1 === 23) {\n    val1 = 'X';\n  } else if (val1 === 24) {\n    val1 = 'Y';\n  }\n\n  return (\n    <>\n      <div className=\"site-statistic-demo-card\">\n        <Row gutter={16}>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Chromosome\"\n                value={val1}\n                precision={0}\n                valueStyle={{ color: '#3f8600' }}\n                prefix={hoveredChrom > -1 ? 'Chr' : ''}\n              />\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Nucleotide Count\"\n                value={length}\n                precision={0}\n                valueStyle={{ color: '#cf1322' }}\n              />\n            </Card>\n          </Col>\n        </Row>\n      </div>\n      ,\n      <Canvas>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        {Data.map((chrom) => {\n          size = new THREE.Vector3(0.3, chrom.len / 15, 0.3);\n          pos = new THREE.Vector3(chrom.x, chrom.y, 0);\n          return (\n            <Cylinder\n              key={chrom.id}\n              info={chrom.id}\n              position={pos}\n              scale={size}\n              hue={\n                props.selectedChromLocations.includes(chrom.id.toString())\n                  ? 'blue'\n                  : 'orange'\n              }\n              viewMode={props.viewMode}\n              setViewMode={props.setViewMode}\n              selectedChrom={props.selectedChrom}\n              setSelectedChrom={props.setSelectedChrom}\n              hoveredChrom={hoveredChrom}\n              setHoveredChrom={setHoveredChrom}\n            />\n          );\n        })}\n      </Canvas>\n    </>\n  );\n}\n\nexport default Ideogram;\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport * as THREE from 'three';\n//import { DataTexture2DArray } from 'three';\nimport { CytoBandData } from '../scripts/genomeTransformer';\n\nexport interface CytobandProps\n  extends Omit<CytoBandData, 'giemsaStains' | 'chromosome' | 'start' | 'end'> {\n  id: number;\n  hue: string;\n  len: number;\n  location: string;\n  xpos: number;\n  ypos: number;\n  bandSelected: string;\n  setBandSelected: React.Dispatch<React.SetStateAction<string>>;\n  bandHovered: string;\n  setBandHovered: React.Dispatch<React.SetStateAction<string>>;\n}\n\n// Render a cytoband, given the JSON description\nfunction Cytoband({\n  len,\n  id,\n  xpos,\n  ypos,\n  hue,\n  location,\n  bandSelected,\n  setBandSelected,\n  bandHovered,\n  setBandHovered,\n  ...props\n}: CytobandProps): JSX.Element {\n  const pos = new THREE.Vector3(xpos, ypos, -200);\n  let size = new THREE.Vector3(10, len, 10);\n\n  // Account for centromere width\n  //if (hue === '#ffbebe') size = new THREE.Vector3(5, len, 5);\n  if (hue === '#febab8') size = new THREE.Vector3(5, len, 5);\n\n  // TODO: removed ref prop from mesh, figure out if this\n  // is required for selecting meshes in the future.\n  // const ref = useRef<THREE.Mesh>(null!);\n  const [hovered, hover] = useState(false);\n\n  function showCardInfo() {\n    setBandSelected(location);\n  }\n\n  function handlePointerOver() {\n    hover(true);\n    console.log(location);\n    setBandHovered(location);\n  }\n\n  function handlePointerOut() {\n    hover(false);\n    setBandHovered('None');\n  }\n\n  function handleClick() {\n    console.log('id ' + id + ' band ' + location);\n    console.log('pos ' + JSON.stringify(pos) + ' size ' + JSON.stringify(size));\n    //console.log('bandselected ' + bandSelected);\n    showCardInfo();\n  }\n\n  return (\n    <mesh\n      {...props}\n      position={pos}\n      scale={size}\n      key={id}\n      onClick={(e) => {\n        e.stopPropagation();\n        handleClick();\n      }}\n      onPointerOver={(e) => {\n        e.stopPropagation();\n        handlePointerOver();\n      }}\n      onPointerOut={(e) => {\n        e.stopPropagation();\n        handlePointerOut();\n      }}\n    >\n      <cylinderGeometry args={[1, 1, 4, 64]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : hue} />\n    </mesh>\n  );\n}\n\nexport default Cytoband;\n","import React, { useState } from 'react';\nimport { Card } from 'antd';\n\n// const tabList = [\n//   {\n//     key: 'tab1',\n//     tab: 'tab1',\n//   },\n//   {\n//     key: 'tab2',\n//     tab: 'tab2',\n//   },\n// ];\n\nconst tabListNoTitle = [\n  {\n    key: 'tab1',\n    tab: 'Info',\n  },\n  {\n    key: 'tab2',\n    tab: 'Pathology',\n  },\n];\n\n// const contentListNoTitle = {\n//   description: <p>content</p>,\n//   diseaseinfo: <p>content</p>,\n// };\n\nexport interface TabsCardProps {\n  urlString: string;\n  name: string;\n  ensemblid: string;\n  description: string;\n  diseaseinfo: string;\n  location: string;\n}\n\nconst TabsCard = ({\n  urlString,\n  name,\n  ensemblid,\n  description,\n  diseaseinfo,\n  location,\n}: TabsCardProps): JSX.Element => {\n  const [activeTabKey1, setActiveTabKey1] = useState('tab1');\n  //const [activeTabKey2, setActiveTabKey2] = useState('tab2');\n  console.log('in tabs card');\n  console.log('description: ' + description);\n  //const [container, setContainer] = useState<HTMLDivElement | null>(null);\n  const contentList: Record<string, JSX.Element> = {\n    tab1: (\n      <>\n        <p>Description: {description}</p>\n        <p>EnsemblID: {ensemblid}</p>\n        <p>Cytoband Location: {location}</p>\n      </>\n    ),\n    tab2: (\n      <>\n        <div>{parseDiseaseInfo(diseaseinfo)}</div>\n      </>\n    ),\n  };\n\n  const onTab1Change = (key: React.SetStateAction<string>) => {\n    setActiveTabKey1(key);\n  };\n  //   const onTab2Change = (key: React.SetStateAction<string>) => {\n  //     setActiveTabKey2(key);\n  //   };\n\n  return (\n    <>\n      <Card\n        className=\"info-card-scrollable\"\n        title={name.toUpperCase()}\n        tabList={tabListNoTitle}\n        activeTabKey={activeTabKey1}\n        tabBarExtraContent={\n          <a href={urlString} target=\"_blank\" rel=\"noreferrer\">\n            More\n          </a>\n        }\n        onTabChange={(key) => {\n          onTab1Change(key);\n        }}\n      >\n        {contentList[activeTabKey1]}\n      </Card>\n      {/* \n      <br />\n      <br />\n      <Card\n        className=\"info-card-scrollable\"\n        hoverable\n        title={name.toUpperCase()}\n        extra={<a href=\"#\">More</a>}\n        tabList={tabList}\n        activeTabKey={activeTabKey2}\n        onTabChange={(key) => {\n          onTab1Change(key);\n        }}\n      >\n        {contentList[activeTabKey2]}\n      </Card>\n     */}\n    </>\n  );\n};\n\nfunction parseDiseaseInfo(diseaseInfo: string) {\n  const list = [];\n  let temp = '';\n\n  for (let i = 0; i < diseaseInfo.length; i++) {\n    if (diseaseInfo[i] === '[') {\n      continue;\n    } else if (diseaseInfo[i] === ']') {\n      list.push(temp);\n      console.log('pushing ' + temp);\n      temp = '';\n      continue;\n    } else if (diseaseInfo[i] === ',') {\n      if (temp !== '') list.push(temp);\n      temp = '';\n      continue;\n    }\n    temp += diseaseInfo[i];\n  }\n\n  console.log('hi');\n  console.log(list.join('\\n'));\n  const arr = diseaseInfo.replaceAll('[', '').replaceAll(']', '').split(',');\n\n  const res = [];\n  let tempList = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 3 !== 0) tempList.push(arr[i]);\n    else {\n      res.push(tempList);\n      tempList = [];\n    }\n  }\n\n  // console.log(diseaseInfo.replaceAll('[', '').replaceAll(']', '').split(','));\n  console.log(res);\n  // .map((val) => {\n  //   return <p key={'yessir'}>{val}</p>;\n  // })\n  // .join('\\n\\n');\n  res.splice(0, 1);\n  return res.map(([one, two, three]) => {\n    console.log([one, two, three]);\n    return (\n      <>\n        <div>\n          {/* {one}\n          <br />\n          {two}\n          <br />\n          {three}\n          <br /> */}\n          <a href={two}>{one}</a>\n        </div>\n      </>\n    );\n  });\n}\n\nexport default TabsCard;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TabsCard from './TabsCard';\nimport { GeneProps } from './Chromosome';\n\nexport interface GeneInfoCardProps {\n  selectedItem: GeneProps;\n  urlString: string;\n}\n\nfunction GeneInfoCard({\n  selectedItem,\n  urlString,\n}: GeneInfoCardProps): JSX.Element {\n  const [proteinCifUrl, setProteinCifUrl] = useState('');\n  const selectedProtein = async () => {\n    try {\n      const proteinSelected = await axios({\n        method: 'get',\n        url: `https://www.uniprot.org/uniprot/?query=${selectedItem.gene.toUpperCase()}+AND+reviewed:yes+AND+organism:9606&sort=score&columns=id&format=tab&limit=1`,\n      }).then((r) => {\n        return r.data.toString();\n      });\n\n      const [, proteinId] = proteinSelected.split('\\n');\n      setProteinCifUrl(\n        `https://alphafold.ebi.ac.uk/files/AF-${proteinId}-F1-model_v2.cif`,\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    selectedProtein();\n  }, []);\n\n  console.log('full object ' + JSON.stringify(selectedItem));\n  console.log('geneinfocard description ' + selectedItem.descriptions);\n  console.log('geneinfocard name ' + selectedItem.gene);\n  console.log('geneinforcard diseaseinfo ' + selectedItem.diseaseInfo);\n\n  return (\n    <>\n      <div style={{ display: 'flex' }}>\n        <div\n          style={{ position: 'relative', height: 250, width: 300, zIndex: 1 }}\n        >\n          <>\n            {proteinCifUrl && (\n              <pdbe-molstar\n                custom-data-format=\"cif\"\n                custom-data-url={proteinCifUrl}\n                hide-controls\n              />\n            )}\n          </>\n        </div>\n      </div>\n      <TabsCard\n        urlString={urlString}\n        name={selectedItem.gene.toUpperCase()}\n        ensemblid={selectedItem.ensembl_id}\n        description={selectedItem.descriptions}\n        diseaseinfo={selectedItem.diseaseInfo}\n        location={selectedItem.cytoband_location}\n      />\n    </>\n  );\n}\n\nexport default GeneInfoCard;\n","import React, { useState } from 'react';\nimport { Canvas, extend } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport Cytoband from './Cytoband';\nimport Data from '../scripts/cytoBand.json';\nimport Sizes from '../scripts/chrom.json';\nimport GeneInfoCard from './GeneInfoCard';\nimport { Card, Row, Col, Statistic } from 'antd';\nimport '../App';\n\nextend({ OrbitControls });\n\nexport interface GeneProps {\n  gene: string;\n  descriptions: string;\n  ensembl_id: string;\n  diseaseInfo: any;\n  cytoband_location: string;\n}\n\ninterface ChromProps {\n  selectedCytobandLocations: string[];\n  selectedChrom: number;\n}\n\nfunction Chromosome({\n  selectedChrom,\n  selectedCytobandLocations,\n}: ChromProps): JSX.Element {\n  // Affine transformation variables\n  //const bandSpacer = 0;\n  let windowStartPt = 135;\n\n  // Fixing minor cutoff issue\n  if (selectedChrom === 16 || selectedChrom === 19 || selectedChrom === 20) {\n    if (selectedChrom === 19) {\n      windowStartPt = 125;\n    } else {\n      windowStartPt = 130;\n    }\n  }\n\n  let prevYLen = 0;\n  let prevYPos = 0;\n\n  // Once chromosome is selected read in size\n  // so cytobands can be scaled correctly.\n  let chromSize = 1000000;\n  if (selectedChrom > 0) {\n    chromSize = Sizes[selectedChrom - 1].assembly_len;\n  }\n\n  // Flex-vis container 600px tall.\n  const yWindowSize = 70;\n  const multiplier = yWindowSize / chromSize;\n\n  // State for selected cytoband, used for info cards.\n  const [bandSelected, setBandSelected] = useState('');\n  const [bandHovered, setBandHovered] = useState('None');\n\n  const selectedItem: GeneProps = JSON.parse(\n    localStorage.getItem(bandSelected),\n  );\n\n  // Note: finding URLs from disease info strings only works for\n  // a single url and breaks otherwise.\n  const re = 'https.*?(?=\\\\])';\n  let foundUrl = '';\n  let urlString = '';\n  //console.log(selectedItem);\n  if (bandSelected !== '' && selectedCytobandLocations.includes(bandSelected)) {\n    foundUrl = selectedItem.diseaseInfo.match(re);\n    if (foundUrl != null) {\n      urlString = foundUrl[0].toString();\n    }\n  }\n\n  const getBandLocation = (name: string): string => {\n    if (selectedChrom > 22) {\n      return name;\n    } else if (selectedChrom > 9) {\n      return name.slice(0, 2) + name.slice(3);\n    }\n    return name.slice(0, 1) + name.slice(2);\n  };\n\n  const getGiemsa = (stainValue: string): string => {\n    switch (stainValue) {\n      case 'gneg':\n        return '#121413';\n      case 'gpos25':\n        return '#272b29';\n      case 'gpos50':\n        return '#383d3a';\n      case 'gpos75':\n        return '#545c57';\n      case 'gpos100':\n        return '#8c9690';\n      case 'gvar':\n        return '#a1a1e4';\n      case 'stalk':\n        return '#8584e5';\n      default:\n        return '#febab8';\n    }\n  };\n\n  // Loop through cytobands and add them to the Canvas.\n  return (\n    <>\n      <div className=\"site-statistic-demo-card\">\n        <Row gutter={16}>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Chromosome\"\n                value={selectedChrom > -1 ? selectedChrom : 'None'}\n                precision={0}\n                valueStyle={{ color: '#3f8600' }}\n                prefix={selectedChrom > -1 ? 'Chr' : ''}\n              />\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card>\n              <Statistic\n                title=\"Cytoband\"\n                value={bandHovered}\n                precision={0}\n                valueStyle={{ color: '#cf1322' }}\n              />\n            </Card>\n          </Col>\n        </Row>\n      </div>\n      ,\n      <div className=\"flex-container\">\n        <div className=\"flex-vis\">\n          <Canvas camera={{ zoom: 1, position: [0, 0, 0] }}>\n            <ambientLight />\n            <pointLight position={[10, 10, 20]} />\n            {Data.filter(\n              (band) =>\n                band.chromosome.substring(3) === selectedChrom.toString(),\n            ).map((band) => {\n              // Calculate cytoband length\n              // Cytoband length = #nucleotides * canvas multiplier\n              const numNucleotides = band.end - band.start;\n              const yLen = numNucleotides * multiplier;\n\n              // Now calculate the positioning of the cytoband\n              // yPos[i] = yPos[i-1] - ((yLen[i-1] + ylen[i]) / 2)\n              const yPos =\n                band.start === 0\n                  ? windowStartPt\n                  : prevYPos - 2 * (prevYLen + yLen);\n              prevYPos = yPos;\n              prevYLen = yLen;\n\n              // Create cytoband location from substring of chromosome name.\n              const bandLocation = getBandLocation(band.name);\n              // Generating hue for a band\n              let hue = 'orange';\n              hue = getGiemsa(band.giemsaStains);\n\n              return (\n                <Cytoband\n                  bandSelected={bandSelected}\n                  setBandSelected={setBandSelected}\n                  bandHovered={bandHovered}\n                  setBandHovered={setBandHovered}\n                  key={band.id}\n                  id={band.id}\n                  xpos={0}\n                  ypos={yPos}\n                  len={yLen}\n                  location={bandLocation}\n                  hue={\n                    selectedCytobandLocations.includes(bandLocation.toString())\n                      ? 'blue'\n                      : hue\n                  }\n                />\n              );\n            })}\n          </Canvas>\n        </div>\n        <div className=\"flex-card\">\n          {bandSelected !== '' &&\n          selectedCytobandLocations.includes(bandSelected) ? (\n            <GeneInfoCard selectedItem={selectedItem} urlString={urlString} />\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Chromosome;\n","import React, { useState } from 'react';\nimport Ideogram from './Ideogram';\nimport Chromosome from './Chromosome';\n// CardList from './Dashboard';\n\nfunction Window({\n  selectedChromLocations,\n  selectedCytobandLocations,\n}: {\n  selectedChromLocations: string[];\n  selectedCytobandLocations: string[];\n}): JSX.Element {\n  // Raycaster for selecting chromosomes in the canvas.\n  //const raycaster = new THREE.Raycaster();\n  //const mouse = new THREE.Vector2()\n  // Ability to switch views and select a chromosome.\n  const [viewMode, setViewMode] = useState(0);\n  const [selectedChrom, setSelectedChrom] = useState(-1);\n  //const [selectedChrom, setSelectedChrom] = useState(0);\n  console.log('current view: ' + viewMode);\n\n  function handleReset() {\n    setSelectedChrom(-1);\n    setViewMode(0);\n  }\n\n  // Translate selected locations into chromosome list\n  //const chromlist = selectedLocations\n  //console.log('Highlighted chromosomes: ' + chromlist);\n\n  // Ideogram view\n  return viewMode === 0 ? (\n    <>\n      <Ideogram\n        selectedChromLocations={selectedChromLocations}\n        viewMode={viewMode}\n        setViewMode={setViewMode}\n        selectedChrom={selectedChrom}\n        setSelectedChrom={setSelectedChrom}\n      />\n    </>\n  ) : (\n    // Chromosome view\n    <>\n      <Chromosome\n        selectedCytobandLocations={selectedCytobandLocations}\n        selectedChrom={selectedChrom}\n      />\n      <button onClick={() => handleReset()}>Go Back</button>\n    </>\n  );\n}\n\nexport default Window;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getGFFRef = /* GraphQL */ `\n  query GetGFFRef($id: ID!) {\n    getGFFRef(id: $id) {\n      dbxref\n      description\n      end\n      gbkey\n      gene\n      gene_biotype\n      id\n      parent\n      name\n      phase\n      pseudo\n      score\n      seqid\n      source\n      start\n      strand\n      type\n      sequence\n      ensembleid\n      cytobandlocation\n      approximatecytoband\n      diseaseinfo\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listGFFRefs = /* GraphQL */ `\n  query ListGFFRefs(\n    $filter: ModelGFFRefFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listGFFRefs(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        dbxref\n        description\n        end\n        gbkey\n        gene\n        gene_biotype\n        id\n        parent\n        name\n        phase\n        pseudo\n        score\n        seqid\n        source\n        start\n        strand\n        type\n        sequence\n        ensembleid\n        cytobandlocation\n        approximatecytoband\n        diseaseinfo\n      }\n      nextToken\n    }\n  }\n`;\nexport const getVCFRef = /* GraphQL */ `\n  query GetVCFRef($id: ID!) {\n    getVCFRef(id: $id) {\n      chrom\n      pos\n      id\n      ref\n      alt\n      qual\n      filter\n      alleleid\n      clndisdb\n      clndn\n      clnhgvs\n      clnrevstat\n      clnsig\n      clnvc\n      clnvcso\n      geneinfo\n      mc\n      origin\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listVCFRefs = /* GraphQL */ `\n  query ListVCFRefs(\n    $filter: ModelVCFRefFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listVCFRefs(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        chrom\n        pos\n        id\n        ref\n        alt\n        qual\n        filter\n        alleleid\n        clndisdb\n        clndn\n        clnhgvs\n        clnrevstat\n        clnsig\n        clnvc\n        clnvcso\n        geneinfo\n        mc\n        origin\n      }\n      nextToken\n    }\n  }\n`;\nexport const searchGFFRefs = /* GraphQL */ `\n  query SearchGFFRefs(\n    $filter: SearchableGFFRefFilterInput\n    $sort: SearchableGFFRefSortInput\n    $limit: Int\n    $nextToken: String\n    $from: Int\n  ) {\n    searchGFFRefs(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n    ) {\n      items {\n        dbxref\n        description\n        cytobandlocation\n        ensembleid\n        end\n        gbkey\n        diseaseinfo\n        gene\n        gene_biotype\n        id\n        parent\n        name\n        phase\n        pseudo\n        score\n        seqid\n        source\n        start\n        strand\n        type\n        sequence\n        ensembleid\n        cytobandlocation\n        approximatecytoband\n        diseaseinfo\n      }\n      nextToken\n      total\n    }\n  }\n`;\nexport const searchVCFRefs = /* GraphQL */ `\n  query SearchVCFRefs(\n    $filter: SearchableVCFRefFilterInput\n    $sort: SearchableVCFRefSortInput\n    $limit: Int\n    $nextToken: String\n    $from: Int\n  ) {\n    searchVCFRefs(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n    ) {\n      items {\n        chrom\n        pos\n        id\n        ref\n        alt\n        qual\n        filter\n        alleleid\n        clndisdb\n        clndn\n        clnhgvs\n        clnrevstat\n        clnsig\n        clnvc\n        clnvcso\n        geneinfo\n        mc\n        origin\n      }\n      nextToken\n      total\n    }\n  }\n`;\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\nimport { Input, Card } from 'antd';\nimport Window from './Window';\nimport { API } from 'aws-amplify';\nimport * as queries from '../graphql/queries';\n\nconst { Search } = Input;\n\nexport interface GeneData {\n  gene: string;\n  description: string;\n  ensembleid: string;\n  diseaseinfo: Record<string, unknown>;\n  cytobandlocation: string;\n}\n\nexport interface VisualizerProps {\n  initialSearch: string;\n}\n\nexport function Visualizer({ initialSearch }: VisualizerProps): JSX.Element {\n  const [genome, setGenome] = useState<GeneData[]>([]);\n  const [vcf, setVcf] = useState([]);\n  const [selectedChromLocations, setSelectedChromLocations] = useState([]);\n  const [selectedCytobandLocations, setSelectedCytobandLocations] = useState(\n    [],\n  );\n\n  useEffect(() => {\n    console.log(initialSearch);\n    if (initialSearch.length != 0) {\n      searchForGene(initialSearch);\n    }\n  }, []);\n\n  const searchForGene = async (searchValue: string) => {\n    try {\n      // @ts-expect-error\n      const geneSearchQuery: Promise<any> = API.graphql({\n        query: queries.searchGFFRefs,\n        variables: {\n          filter: {\n            name: { eq: searchValue },\n          },\n        },\n      });\n      //@ts-expect-error\n      const diseaseSearchQuery: Promise<any> = API.graphql({\n        query: queries.searchGFFRefs,\n        variables: {\n          filter: {\n            diseaseinfo: { matchPhrase: `${searchValue.toLowerCase()}*` },\n          },\n        },\n      });\n\n      const [geneSearchResults, diseaseSearchResults] = await Promise.all([\n        geneSearchQuery,\n        diseaseSearchQuery,\n      ]);\n\n      const results =\n        geneSearchResults.data.searchGFFRefs.items.length === 0\n          ? diseaseSearchResults.data.searchGFFRefs.items\n          : geneSearchResults.data.searchGFFRefs.items;\n\n      // const results = geneSearchResults.data.searchGFFRefs.items;\n      const cytoArr = results.map((item: any) => item.cytobandlocation);\n      const chromArr = cytoArr.map((item: any) => parseChrom(item));\n\n      // Set locations.\n      setSelectedChromLocations(chromArr);\n      setSelectedCytobandLocations(cytoArr);\n\n      // Clear storage\n      localStorage.clear();\n      const filteredData = results.map((x: any) => {\n        const obj = {\n          gene: x.gene,\n          descriptions: x.description,\n          ensembl_id: x.ensembleid,\n          diseaseInfo: x.diseaseinfo,\n          cytoband_location: x.cytobandlocation,\n        };\n        localStorage.setItem(\n          obj.cytoband_location,\n          JSON.stringify(obj, undefined, 2),\n        );\n        return obj;\n      });\n      // console.log('filtered data' + filteredData);\n      // Set gene info card objects.\n      //setGeneCards(filteredData);\n      // Set printable GFF data.\n      setGenome(geneSearchResults.data.searchGFFRefs.items);\n\n      const vcfSearchResults = await API.graphql({\n        query: queries.searchVCFRefs,\n        variables: {\n          filter: { geneinfo: { wildcard: `${searchValue.toLowerCase()}*` } },\n        },\n      });\n\n      // @ts-expect-error\n      setVcf(vcfSearchResults.data.searchVCFRefs.items);\n      // console.log(data.data.searchGffRefs.items);\n      console.log('genome ' + genome);\n      console.log('vcf' + vcf);\n    } catch (err) {\n      console.log('there was an error');\n      console.log(err);\n    }\n  };\n\n  return (\n    <div>\n      <Card>\n        <div\n          style={{\n            display: 'flex',\n            alignContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <h3\n            style={{\n              padding: 10,\n              width: '40%',\n              fontWeight: 'normal',\n              fontSize: 18,\n            }}\n          >\n            Genome Visualization\n          </h3>\n          <Search\n            placeholder=\"Input gene name, disease name...\"\n            allowClear\n            onSearch={searchForGene}\n            style={{ width: '100%' }}\n            enterButton=\"Search\"\n          />\n        </div>\n      </Card>\n      <Card>\n        <Window\n          selectedChromLocations={selectedChromLocations}\n          selectedCytobandLocations={selectedCytobandLocations}\n        />\n      </Card>\n      {/* eslint-disable-next-line*/}\n      {/*genome.map((genomeStuff: any) => {\n            // eslint-disable-next-line\n            return Object.keys(genomeStuff).map((key, index: any) => {\n              return (\n                <div key={index} style={{ textAlign: 'left' }}>\n                  <div style={{ textDecoration: 'underline' }}>{`${key}`}</div>\n                  <div\n                    style={{ overflowWrap: 'break-word' }}\n                  >{`${genomeStuff[key]}`}</div>\n                </div>\n              );\n            });\n          })*/}\n      {/*vcf.map((vcfStuff: any) => {\n            return Object.keys(vcfStuff).map((key, index: any) => {\n              return (\n                <div key={index} style={{ textAlign: 'left' }}>\n                  <div style={{ textDecoration: 'underline' }}>{`${key}`}</div>\n                  <div\n                    style={{ overflowWrap: 'break-word' }}\n                  >{`${vcfStuff[key]}`}</div>\n                </div>\n              );\n            });\n          })*/}\n    </div>\n  );\n}\n\nfunction parseChrom(cytoband: string): string {\n  let chrom = '';\n  let curIndex = 0;\n  while (curIndex <= cytoband.length - 1) {\n    if (cytoband[curIndex] === 'p' || cytoband[curIndex] === 'q') {\n      break;\n    }\n    chrom += cytoband[curIndex];\n    curIndex++;\n  }\n\n  // TODO: this is a bandaid.\n  // The real solution is to rename the chromosomes to X and Y instead of\n  // 23 and 24.\n  if (chrom === 'X') return '23';\n  else if (chrom === 'Y') return '24';\n\n  return chrom;\n}\n","export interface BlastMatch {\n  align_length: number;\n  gene_symbol: string;\n  sbjct_end: number;\n  sbjct_start: number;\n  best_evalue: number;\n  best_score: number;\n  num_hits: number;\n}\n\nexport interface BlastMetaData {\n  best_evalue: number;\n  best_gene_symbol: string;\n  best_score: number;\n  longest_alignment: number;\n  total_hits: number;\n}\n\nexport interface BlastSearchResponse {\n  matches: BlastMatch[];\n  metadata: BlastMetaData;\n}\n\nexport const BlastAPI = {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async search(sequence: string): Promise<BlastSearchResponse> {\n    const payload = { sequence };\n\n    console.log(payload);\n    const host =\n      'https://blast-backend.gbaobaok2t5qo.us-east-2.cs.amazonlightsail.com';\n\n    // return mockReponse.matches;\n    const results = await fetch(`${host}/blastsearch`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((json) => json as BlastSearchResponse);\n    return results;\n  },\n};\n","/* eslint-disable */\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Button, Table, Upload, Typography } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport React, { useState } from 'react';\nimport { BlastAPI, BlastMatch, BlastSearchResponse } from '../BlastAPI';\n\nconst { Text } = Typography;\n\nexport interface AnalyzerProps {\n  setInitialSearch: React.Dispatch<React.SetStateAction<string>>;\n  setCurrentView: React.Dispatch<\n    React.SetStateAction<'analyzer' | 'visualizer' | 'help'>\n  >;\n}\n\nexport function Analyzer({\n  setCurrentView,\n  setInitialSearch,\n}: AnalyzerProps): JSX.Element {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState<BlastSearchResponse>(null);\n\n  //@ts-ignore\n  const beforeFileUpload = (file) => {\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsText(file, 'UTF-8');\n      reader.onload = function (evt) {\n        //@ts-ignore\n        setInput(`${evt.target.result}`);\n      };\n      reader.onerror = function (evt) {\n        console.log(evt);\n      };\n    }\n  };\n\n  const onRunButtonClick = async () => {\n    console.log(input);\n\n    /**\n     * Columns:\n     *\n     * alignment_length\n     * gaps\n     * expect\n     */\n    const results = await BlastAPI.search(input);\n    setOutput(results);\n  };\n\n  const moveToSearch = (text: string) => {\n    setInitialSearch(text);\n    setCurrentView('visualizer');\n  };\n\n  const tableColumns = [\n    {\n      title: 'Gene Symbol',\n      dataIndex: 'gene_symbol',\n      key: 'gene_symbol',\n      render: (text: string) => (\n        <Button\n          onClick={() => {\n            moveToSearch(text);\n          }}\n        >\n          {text}\n        </Button>\n      ),\n    },\n    {\n      title: '# Hits',\n      dataIndex: 'num_hits',\n      key: 'num_hits',\n    },\n    {\n      title: 'Best Score',\n      dataIndex: 'best_score',\n      key: 'best_score',\n    },\n    {\n      title: 'Best E-Value',\n      dataIndex: 'best_evalue',\n      key: 'best_evalue',\n    },\n    {\n      title: 'Align Length',\n      dataIndex: 'align_length',\n      key: 'align_length',\n    },\n    {\n      title: 'Subject Start',\n      dataIndex: 'sbjct_start',\n      key: 'sbjct_start',\n    },\n    {\n      title: 'Subject End',\n      dataIndex: 'sbjct_end',\n      key: 'sbjct_end',\n    },\n  ];\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'space-evenly',\n          flexDirection: 'column',\n        }}\n      >\n        <h1 style={{ textAlign: 'left' }}>Sequence Analyzer</h1>\n        <Text style={{ textAlign: 'left', fontSize: 14 }}>\n          <a href=\"https://blast.ncbi.nlm.nih.gov/Blast.cgi\">Blast</a> is a tool\n          used by people in bioinformatics to align smaller sequences of genes\n          to larger ones. The reason this is interesting is it allows you to\n          take any sequence of A G C and Ts and find what gene it represents.\n          Below, you can enter any sequence and find what genes it aligns to in\n          order to learn what they are and what genes their assosciated with. If\n          this is your first time or your having a hard time deciding what to\n          search, feel free to take a look at this{' '}\n          <a href=\"https://www.darkdaily.com/2018/05/16/top-10-list-of-the-most-studied-genes-of-all-time-includes-several-used-in-clinical-laboratory-testing-for-cancers-other-diseases-516/\">\n            list\n          </a>{' '}\n          of common gene sequences.\n        </Text>\n\n        <TextArea\n          style={{ height: 200 }}\n          // @ts-ignore\n          value={input}\n          onChange={(e) => {\n            setInput(e.target.value);\n          }}\n        />\n        <div\n          style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            alignContent: 'space-between',\n          }}\n        >\n          <Upload\n            beforeUpload={beforeFileUpload}\n            action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          >\n            <Button icon={<UploadOutlined />}>Click to Upload</Button>\n          </Upload>\n          <Button type=\"primary\" onClick={onRunButtonClick}>\n            Run\n          </Button>\n        </div>\n        {output != null ? (\n          <>\n            <h1 style={{ textAlign: 'left' }}>Results</h1>\n\n            <h1 style={{ textAlign: 'left' }}>Output Summary</h1>\n            <Text style={{ textAlign: 'left' }}>\n              The result of your query generated {output.metadata.total_hits}{' '}\n              number of hits on {output.matches.length} number of genes. These\n              hits represent parts of your query sequence that were aligned to\n              the gene sequences. The best scoring alignment was for x gene and\n              it produced {output.metadata.best_score} score. This score is\n              determined by how many gaps between the query sequence and the\n              gene sequence that had to be added in order to make them align.\n              The length of the longest alignment was{' '}\n              {output.metadata.longest_alignment} It has an e value of{' '}\n              {output.metadata.best_evalue} (e value is a way of describing how\n              likely it is that this is the best possible match for the\n              sequence). If you'd like to view the gene that was best aligned in\n              the visualizer, click here. You can also use the table on the left\n              to visualize any gene that was aligned to your sequence.\n            </Text>\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                moveToSearch(output.metadata.best_gene_symbol);\n              }}\n            >\n              View Gene in Visualization\n            </Button>\n            <Table dataSource={output.matches} columns={tableColumns} />\n\n            <div style={{ display: 'flex', alignItems: 'space-evenly' }}></div>\n          </>\n        ) : (\n          <div></div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nconst headerStyle = {\n  textDecoration: 'underline',\n};\n\nexport function HelpPage(): JSX.Element {\n  return (\n    <div className=\"HelpPage\" style={{ textAlign: 'left' }}>\n      <h1 style={{ fontSize: 52, fontWeight: 'bold' }}>Help</h1>\n      <h2 style={headerStyle}>What is VISIONome?</h2>\n      <p>\n        Welcome to VISIONome. This is a website developed by five UCF students\n        with info about the human genome. As many know, every human possesses a\n        unique DNA sequence. However, it can become extremely complex to\n        understand for those without training and background in bioinformaticxs.\n        This is what inspired us to create VISIONome. VISIONome is a{' '}\n        <a href=\"https://en.wikipedia.org/wiki/Portmanteau\">portmanteau</a> of\n        the words vision and and genome. This website was made to combine\n        computer aspects of visualization with information on the human genome.\n        Every person on this planet has a unique form of genome sequencing, and\n        said sequencing can contain a{' '}\n        <a href=\"https://medlineplus.gov/genetics/understanding/genomicresearch/snp/#:~:text=When%20SNPs%20occur%20within%20a,the%20study%20of%20human%20health.\">\n          slight difference\n        </a>{' '}\n        in their genetic coding, which could result in genetic diseases,\n        specific to that difference.\n      </p>\n\n      <h2 style={headerStyle}>Goal</h2>\n      <p>\n        Being a bioinformatics-centered website, the goal of VISIONome is not to\n        be the best of the bunch. What this website offers that others do\n        visualization aspect. The Human Genome is complex and can be a bit\n        difficult to comprehend for anyone getting into the subject for the very\n        very first time. VISIONome is made for the purpose of helping people,\n        people, who are new or new or struggle with the human genome, such as\n        high-schoolers. Other websites are more technical in nature, and less\n        appropriate for the understanding of beginners. Of course, this website\n        might require some basic understanding of the genetics, but it should be\n        simple to traverse and explore in your quest for more knowledge on the\n        genome.\n      </p>\n\n      <h2 style={headerStyle}>How to Use</h2>\n      <p>\n        To get started with VISIONome, you will be presented with an diagram of\n        all twenty-four chromosomes, including the Y and X chromosomes. Each\n        chromosome on the{' '}\n        <a href=\"http://www.pathology.washington.edu/research/cytopages/idiograms/human/\">\n          <i>ideogram</i>\n        </a>{' '}\n        can be viewed individually, simply by clicking on it, allowing you to\n        view the{' '}\n        <a href=\"https://en.wikipedia.org/wiki/G_banding#:~:text=G%2Dbanding%2C%20G%20banding%20or,of%20the%20entire%20chromosome%20complement.\">\n          <i>cytobands</i>\n        </a>{' '}\n        contained within. To use the primary feature of the visualization,\n        simply type your desired disease or gene into the search bar, which in\n        turn, will light up search results in the chromosomes. Within any\n        selected chromosome, it will also light up the area on the cytoband\n        showing where the disease information was found.\n      </p>\n\n      <h2 style={headerStyle}>About the creators</h2>\n      <p>\n        The project started as five UCF students who came together to make a\n        project together for Senior Design. One of us came up with the idea of\n        making an easy to use bioinformatics website, and we all worked over the\n        course of nine months to make it a reality.\n      </p>\n\n      <h2 style={headerStyle}>Attribution</h2>\n      <p>\n        We would like to thank NCBI, BioDBNet, NCI, MESH and OMIM for their work\n        on the biology and providing the public with high quality infomration\n        and keeping it open.\n      </p>\n      <p>\n        We would also like to thank the people cited below for their amazing\n        work on the <a href=\"https://molstar.org/\">molstar</a> component.\n        Because of the complexity of the work we could not have included it in\n        our project without their amazing work and them open sourcing it.\n      </p>\n      <p>\n        David Sehnal, Sebastian Bittrich, Mandar Deshpande, Radka Svobodová,\n        Karel Berka, Václav Bazgier, Sameer Velankar, Stephen K Burley, Jaroslav\n        Koča, Alexander S Rose: Mol* Viewer: modern web app for 3D visualization\n        and analysis of large biomolecular structures, Nucleic Acids Research,\n        2021; https://doi.org/10.1093/nar/gkab314.\n      </p>\n    </div>\n  );\n}\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\nimport { Layout, Menu, Breadcrumb, Input, MenuItemProps } from 'antd';\nimport type { SelectInfo } from 'rc-menu/lib/interface';\nimport {\n  HomeFilled,\n  AppstoreFilled,\n  InfoCircleFilled,\n  MenuOutlined,\n  SlidersFilled,\n  QuestionCircleFilled,\n} from '@ant-design/icons';\nimport { API } from 'aws-amplify';\nconst { Search } = Input;\nimport * as queries from '../graphql/queries';\nimport Window from './Window';\nimport logoImage from '../assets/visionome-logo-alt.png';\nimport logoText from '../assets/visionome-logo.png';\nimport { Visualizer } from './Visualizer';\nimport { Analyzer } from './Analyzer';\nimport { HelpPage } from './HelpPage';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst SelectedView = (props: {\n  currentView: string;\n  setCurrentView: React.Dispatch<\n    React.SetStateAction<'analyzer' | 'visualizer' | 'help'>\n  >;\n  setInitialSearch: React.Dispatch<React.SetStateAction<string>>;\n  initialSearch: string;\n}): JSX.Element => {\n  if (props.currentView === 'visualizer')\n    return <Visualizer initialSearch={props.initialSearch} />;\n  else if (props.currentView === 'analyzer')\n    return (\n      <Analyzer\n        setInitialSearch={props.setInitialSearch}\n        setCurrentView={props.setCurrentView}\n      />\n    );\n  else if (props.currentView === 'help') return <HelpPage />;\n};\n\nconst Dashboard = (): JSX.Element => {\n  const [initialSearch, setInitialSearch] = useState('');\n  const [currentView, setCurrentView] = useState<\n    'visualizer' | 'analyzer' | 'help'\n  >('visualizer');\n\n  const onSelectView = (info: SelectInfo) => {\n    setCurrentView(info.key as 'visualizer' | 'analyzer' | 'help');\n  };\n\n  // const moveToSearch = (text: string) => {\n  //   setInitalSearch(text);\n  //   setCurrentView('analyzer');\n  // };\n\n  useEffect(() => {\n    // searchForGene();\n  }, []);\n\n  return (\n    <Layout>\n      <Content style={{ padding: '0 50px' }}>\n        <Header\n          style={{\n            backgroundColor: 'white',\n            display: 'flex',\n            alignItems: 'center',\n            alignContent: 'center',\n          }}\n        >\n          <img src={logoImage} height={80} />\n          <img src={logoText} />\n        </Header>\n        <div className=\"site-layout-content\">\n          <SelectedView\n            currentView={currentView}\n            setCurrentView={setCurrentView}\n            initialSearch={initialSearch}\n            setInitialSearch={setInitialSearch}\n          />\n        </div>\n      </Content>\n      <Sider theme=\"light\" style={{ display: 'flex', flexDirection: 'column' }}>\n        <div className=\"logo\" />\n        <div\n          style={{\n            display: 'flex',\n            paddingLeft: 10,\n            height: 50,\n            alignContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <MenuOutlined style={{ color: '#0070e8' }} />\n          <div style={{ flex: 1, textAlign: 'left', marginLeft: 10 }}>\n            <h2 style={{ marginLeft: 12, marginBottom: 0 }}>Menu</h2>\n          </div>\n        </div>\n        <Menu\n          theme=\"light\"\n          defaultSelectedKeys={[currentView]}\n          mode=\"inline\"\n          onSelect={onSelectView}\n        >\n          <Menu.Item key=\"visualizer\" icon={<SlidersFilled />}>\n            Genome Visualizer\n          </Menu.Item>\n          <Menu.Item key=\"analyzer\" icon={<AppstoreFilled />}>\n            Sequence Analyzer\n          </Menu.Item>\n          <Menu.Item key=\"help\" icon={<QuestionCircleFilled />}>\n            Help\n          </Menu.Item>\n          <SubMenu key=\"3\" title=\"More Info\" icon={<InfoCircleFilled />} />\n        </Menu>\n        <div style={{ display: 'flex', flexDirection: 'column' }} />\n      </Sider>\n    </Layout>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './components/Dashboard';\nimport './App.scss';\nimport './style/App.css';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n  // WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n  \n  const awsmobile = {\n    aws_project_region: 'us-east-1',\n    aws_appsync_graphqlEndpoint: 'https://nyl4bhqofrblfloxclguv4lvbm.appsync-api.us-east-1.amazonaws.com/graphql',\n    aws_appsync_region: 'us-east-1',\n    aws_appsync_authenticationType: 'API_KEY',\n    aws_appsync_apiKey: 'da2-tf7d6apmrfe6tekosddms3ulae',\n  };\n  \n  export default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport Amplify from 'aws-amplify';\nimport awsExports from './aws-exports';\nAmplify.configure(awsExports);\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}