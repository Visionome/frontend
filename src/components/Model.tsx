/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

//import { proxy, useSnapshot } from 'valtio';
import React, { Suspense, useRef } from 'react';
//import { useGLTF } from '@react-three/drei';
// @ts-ignore
import Autosome from './Chrom1Centered';
// @ts-ignore
import X from './Chrom1Left';
// @ts-ignore
import Y from './Chrom1Right';
import * as THREE from 'three';

export interface ModelProps {
  position: THREE.Vector3;
  scale: THREE.Vector3;
  info: number;
  viewMode: number;
  hue: string;
  setViewMode: React.Dispatch<React.SetStateAction<number>>;
  selectedChrom: number;
  setSelectedChrom: React.Dispatch<React.SetStateAction<number>>;
  hoveredChrom: number;
  setHoveredChrom: React.Dispatch<React.SetStateAction<number>>;
}

// const state = proxy({
//   current: null,
//   items: {
//     DefaultMaterial: 'grey',
//     HighlightMaterial: 'orange',
//     HoverMaterial: 'pink',
//   },
// });

export default function Model({
  scale,
  position,
  info,
  hue,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  ...props
}: ModelProps): JSX.Element {
  const group = useRef<THREE.Group>();
  //const snap = useSnapshot(state);
  // const { nodes, materials } = useGLTF('/assets/Chrom1Centered.glb');
  // const [hovered, hover] = useState(null);
  // const [color, setColor] = useState(snap.items.DefaultMaterial);

  // function handleClick() {
  //   props.setViewMode(1);
  //   props.setSelectedChrom(props.info);
  //   console.log(props.info);
  // }

  // function activateHover() {
  //   hover(true);
  //   props.setHoveredChrom(props.info);
  //   if (props.hoveredChrom === props.info) {
  //     setColor(snap.items.HoverMaterial);
  //   }
  //   console.log('activating hover');
  // }

  // function deactivateHover() {
  //   hover(false);
  //   props.setHoveredChrom(-1);
  //   setColor(snap.items.DefaultMaterial);
  //   console.log('deactivating hover');
  // }
  // Chromosome models in Ideogram
  if (info < 23) {
    console.log('autosome');
    return (
      // Autosomes
      <Suspense fallback={null}>
        <Autosome
          group={group}
          position={position}
          scale={scale}
          hue={hue}
          info={info}
          viewMode={props.viewMode}
          setViewMode={props.setViewMode}
          selectedChrom={props.selectedChrom}
          setSelectedChrom={props.setSelectedChrom}
          hoveredChrom={props.hoveredChrom}
          setHoveredChrom={props.setHoveredChrom}
        />
      </Suspense>
    );
  } else if (info === 23) {
    return (
      // X Chrom
      <Suspense fallback={null}>
        <X
          group={group}
          position={position}
          scale={scale}
          hue={hue}
          info={info}
          viewMode={props.viewMode}
          setViewMode={props.setViewMode}
          selectedChrom={props.selectedChrom}
          setSelectedChrom={props.setSelectedChrom}
          hoveredChrom={props.hoveredChrom}
          setHoveredChrom={props.setHoveredChrom}
        />
      </Suspense>
    );
  } else {
    return (
      // Y Chrom
      <Suspense fallback={null}>
        <Y
          group={group}
          position={position}
          scale={scale}
          hue={hue}
          info={info}
          viewMode={props.viewMode}
          setViewMode={props.setViewMode}
          selectedChrom={props.selectedChrom}
          setSelectedChrom={props.setSelectedChrom}
          hoveredChrom={props.hoveredChrom}
          setHoveredChrom={props.setHoveredChrom}
        />
      </Suspense>
    );
  }
}
